#region Using declarations

using System;
using System.Windows;
using System.Windows.Media;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Xml.Serialization;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using SharpDX;
using SharpDX.Direct2D1;

#endregion

namespace NinjaTrader.NinjaScript.Indicators
{
    public class DTFXAlgoZones : Indicator
    {
        private class ZoneInfo
        {
            public int StartBar { get; set; }
            public int EndBar { get; set; }
            public double High { get; set; }
            public double Low { get; set; }
            public bool IsBullish { get; set; }
            public double[] FibLevels { get; set; }
        }

        private readonly System.Collections.Generic.List<ZoneInfo> zones = new System.Collections.Generic.List<ZoneInfo>();
        private int dir = 0;
        private double lastTop = double.NaN;
        private double lastBot = double.NaN;
        private int lastTopBar = -1;
        private int lastBotBar = -1;
        private ZoneInfo currentZone = null;
        private SharpDX.Direct2D1.SolidColorBrush bullZoneBrush;
        private SharpDX.Direct2D1.SolidColorBrush bearZoneBrush;
        private SharpDX.Direct2D1.SolidColorBrush fibBullBrush;
        private SharpDX.Direct2D1.SolidColorBrush fibBearBrush;
        private static readonly double[] fibLevels = new[] { 0, 0.382, 0.5, 0.618, 1.0 };

        // New variable to track the last signal time
        private int lastSignalBar = -1;

        // New public property for minimum bars between signals
        private int minBarsBetweenSignals = 5; // Default minimum bars between signals

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = "DTFX Algo Zones Indicator";
                Name = "DTFX Algo Zones";
                Calculate = Calculate.OnBarClose;
                IsOverlay = true;
                DisplayInDataBox = true;
                DrawOnPricePanel = true;
                ScaleJustification = NinjaTrader.Gui.Chart.ScaleJustification.Right;
                StructureLengthValue = 5; // Default value for structure length
                AddPlot(new Stroke(Brushes.Red, 2), PlotStyle.Dot, "SwingHigh");
                AddPlot(new Stroke(Brushes.Green, 2), PlotStyle.Dot, "SwingLow");
            }
            else if (State == State.Historical)
            {
                zones.Clear();
            }
            else if (State == State.Terminated)
            {
                DisposeBrushes();
            }
        }

        private void DisposeBrushes()
        {
            if (bullZoneBrush != null) bullZoneBrush.Dispose();
            if (bearZoneBrush != null) bearZoneBrush.Dispose();
            if (fibBullBrush != null) fibBullBrush.Dispose();
            if (fibBearBrush != null) fibBearBrush.Dispose();
        }

        private double[] CalculateFibLevels(double high, double low, bool isBullish)
        {
            double[] levels = new double[fibLevels.Length];
            double range = high - low;

            for (int i = 0; i < fibLevels.Length; i++)
            {
                levels[i] = isBullish ? low + (range * fibLevels[i]) : high - (range * fibLevels[i]);
            }
            return levels;
        }

        protected override void OnBarUpdate()
        {
            if (CurrentBar < StructureLengthValue) return;

            double upper = MAX(High, StructureLengthValue)[StructureLengthValue];
            double lower = MIN(Low, StructureLengthValue)[StructureLengthValue];

            Values[0][0] = double.NaN;
            Values[1][0] = double.NaN;

            bool isHighestHigh = true;
            bool isLowestLow = true;

            for (int i = 0; i < StructureLengthValue; i++)
            {
                if (High[StructureLengthValue] <= High[i]) isHighestHigh = false;
                if (Low[StructureLengthValue] >= Low[i]) isLowestLow = false;
            }

            // Check if enough bars have passed since the last signal
            if (CurrentBar - lastSignalBar >= minBarsBetweenSignals)
            {
                // Create a new zone only if the direction has changed and the structure length condition is met
                if (dir >= 0 && isHighestHigh)
                {
                    dir = -1;
                    lastTop = High[StructureLengthValue];
                    lastTopBar = CurrentBar - StructureLengthValue;
                    Values[0][0] = lastTop;

                    if (lastBotBar != -1)
                    {
                        CreateZone(true);
                        lastSignalBar = CurrentBar; // Update last signal bar
                    }
                }

                if (dir <= 0 && isLowestLow)
                {
                    dir = 1;
                    lastBot = Low[StructureLengthValue];
                    lastBotBar = CurrentBar - StructureLengthValue;
                    Values[1][0] = lastBot;

                    if (lastTopBar != -1)
                    {
                        CreateZone(false);
                        lastSignalBar = CurrentBar; // Update last signal bar
                    }
                }
            }

            // Zone maintenance
            if (currentZone != null)
            {
                currentZone.EndBar = CurrentBar;

                if ((currentZone.IsBullish && Low[0] < currentZone.Low) ||
                    (!currentZone.IsBullish && High[0] > currentZone.High))
                {
                    CreateZone(!currentZone.IsBullish);
                }
            }
        }

        private void CreateZone(bool isBullish)
        {
            if (currentZone != null)
                currentZone.EndBar = CurrentBar;

            currentZone = new ZoneInfo
            {
                StartBar = isBullish ? lastBotBar : lastTopBar,
                EndBar = CurrentBar,
                High = lastTop,
                Low = lastBot,
                IsBullish = isBullish,
                FibLevels = CalculateFibLevels(lastTop, lastBot, isBullish)
            };

            zones.Add(currentZone);
        }

        protected override void OnRender(ChartControl chartControl, ChartScale chartScale)
        {
            if (bullZoneBrush == null)
            {
                bullZoneBrush = new SharpDX.Direct2D1.SolidColorBrush(RenderTarget, new SharpDX.Color(0, 255, 0, 30));
                bearZoneBrush = new SharpDX.Direct2D1.SolidColorBrush(RenderTarget, new SharpDX.Color(255, 0, 0, 30));
                fibBullBrush = new SharpDX.Direct2D1.SolidColorBrush(RenderTarget, new SharpDX.Color(0, 255, 0, 255));
                fibBearBrush = new SharpDX.Direct2D1.SolidColorBrush(RenderTarget, new SharpDX.Color(255, 0, 0, 255));
            }

            var strokeStyleProperties = new SharpDX.Direct2D1.StrokeStyleProperties
            {
                DashStyle = SharpDX.Direct2D1.DashStyle.Dash
            };

            using (var dashedStrokeStyle = new SharpDX.Direct2D1.StrokeStyle(RenderTarget.Factory, strokeStyleProperties))
            {
                foreach (ZoneInfo zone in zones)
                {
                    if (zone.EndBar == 0) continue;

                    float x1 = chartControl.GetXByBarIndex(ChartBars, zone.StartBar);
                    float x2 = chartControl.GetXByBarIndex(ChartBars, zone.EndBar);
                    float y1 = chartScale.GetYByValue(zone.High);
                    float y2 = chartScale.GetYByValue(zone.Low);

                    // Reduce the width of the zone boxes by 50%
                    float zoneWidth = (x2 - x1) * 0.5f;

                    RenderTarget.FillRectangle(
                        new SharpDX.RectangleF(x1, y1, zoneWidth, y2 - y1),
                        zone.IsBullish ? bullZoneBrush : bearZoneBrush);

                    var fibBrush = zone.IsBullish ? fibBullBrush : fibBearBrush;
                    foreach (double fibLevel in zone.FibLevels)
                    {
                        float y = chartScale.GetYByValue(fibLevel);
                        RenderTarget.DrawLine(
                            new Vector2(x1, y),
                            new Vector2(x1 + zoneWidth, y), // Adjusted to match the reduced width
                            fibBrush,
                            1,
                            dashedStrokeStyle);
                    }
                }
            }
        }

        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name = "Structure Length", Description = "Number of bars for structure calculation", Order = 1, GroupName = "Parameters")]
        public int StructureLengthValue { get; set; }

        // New public property for minimum bars between signals
        [NinjaScriptProperty]
        [Range(1, int.MaxValue)]
        [Display(Name = "Minimum Bars Between Signals", Description = "Minimum number of bars to wait before allowing a new signal", Order = 2, GroupName = "Parameters")]
        public int MinBarsBetweenSignals
        {
            get { return minBarsBetweenSignals; }
            set { minBarsBetweenSignals = value; }
        }
    }
}

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private DTFXAlgoZones[] cacheDTFXAlgoZones;
		public DTFXAlgoZones DTFXAlgoZones(int structureLengthValue, int minBarsBetweenSignals)
		{
			return DTFXAlgoZones(Input, structureLengthValue, minBarsBetweenSignals);
		}

		public DTFXAlgoZones DTFXAlgoZones(ISeries<double> input, int structureLengthValue, int minBarsBetweenSignals)
		{
			if (cacheDTFXAlgoZones != null)
				for (int idx = 0; idx < cacheDTFXAlgoZones.Length; idx++)
					if (cacheDTFXAlgoZones[idx] != null && cacheDTFXAlgoZones[idx].StructureLengthValue == structureLengthValue && cacheDTFXAlgoZones[idx].MinBarsBetweenSignals == minBarsBetweenSignals && cacheDTFXAlgoZones[idx].EqualsInput(input))
						return cacheDTFXAlgoZones[idx];
			return CacheIndicator<DTFXAlgoZones>(new DTFXAlgoZones(){ StructureLengthValue = structureLengthValue, MinBarsBetweenSignals = minBarsBetweenSignals }, input, ref cacheDTFXAlgoZones);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.DTFXAlgoZones DTFXAlgoZones(int structureLengthValue, int minBarsBetweenSignals)
		{
			return indicator.DTFXAlgoZones(Input, structureLengthValue, minBarsBetweenSignals);
		}

		public Indicators.DTFXAlgoZones DTFXAlgoZones(ISeries<double> input , int structureLengthValue, int minBarsBetweenSignals)
		{
			return indicator.DTFXAlgoZones(input, structureLengthValue, minBarsBetweenSignals);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.DTFXAlgoZones DTFXAlgoZones(int structureLengthValue, int minBarsBetweenSignals)
		{
			return indicator.DTFXAlgoZones(Input, structureLengthValue, minBarsBetweenSignals);
		}

		public Indicators.DTFXAlgoZones DTFXAlgoZones(ISeries<double> input , int structureLengthValue, int minBarsBetweenSignals)
		{
			return indicator.DTFXAlgoZones(input, structureLengthValue, minBarsBetweenSignals);
		}
	}
}

#endregion
